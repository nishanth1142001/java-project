=====================================================================================
package com.jspiders;

public interface StudentManagementSystem {
	void addstudent();
	void displayStudent();
	void displayAllStudent();
	void removeStudent();
	void removeAllStudent();
	void updateStudent();
	void countStudent();
	void sortStudent();
}
// all the methods are public and abstract ----
// varible -- public static final
==========================================================================================================
package com.jspiders;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

import com.customException.StudentNotFoundException;

public class StudentManagementImpl implements StudentManagementSystem {
	Scanner scanner = new Scanner(System.in);
	Map<String,Student> db = new LinkedHashMap<>();
	@Override
	public void addstudent() {

		System.out.println("Enter Student name :");
		String name =scanner.next();
		System.out.println("Enter his/her age :");
		int age= scanner.nextInt();
		System.out.println("Enter his/her marks");
		double marks = scanner.nextDouble();
		Student student = new Student(age,name, marks);
		db.put(student.getId(),student);
		System.out.println("Student record inserted successfully");
		System.out.println("Your student id is :"+student.getId());
	}

	@Override
	public void displayStudent() {
		System.out.println("Enter Student id :");
		String id = scanner.next();
		id = id.toUpperCase();
		if(db.containsKey(id)) {
			Student obj = db.get(id);
			System.out.println("Id :"+obj.getId());
			System.out.println("Name :"+obj.getName());
			System.out.println("Age :"+obj.getAge());
			System.out.println("Marks :"+obj.getMarks());
			System.out.println(db.get(id));
		}
	}

	@Override
	public void displayAllStudent() {
		// Map--> set of keys
		// for--> get()
		Set<String> s =	db.keySet();
		if(db.size()!=0) {
			System.out.println("Student records are as follows");
			for(String a : s) {
				System.out.println(db.get(a));
			}
		}
		else {
			try {
				throw new StudentNotFoundException("Student record not available");
			}
			catch(Exception e) {
				System.out.println(e.getMessage());
			}
		}
	}

	@Override
	public void removeStudent() {


	}

	@Override
	public void removeAllStudent() {
		System.out.println("Removing the Student");	
		db.clear();
	}

	@Override
	public void updateStudent() {

	}

	@Override
	public void countStudent() {
		System.out.println("Total number of students "+db.size());
	}

	@Override
	public void sortStudent() {

	}

}
=======================================================================================================
package com.jspiders;

public class Student {
	private String id;
	private int age;
	private String name;
	private Double marks;
	static int count = 100;
	public Student(int age, String name, Double marks) {
		this.id = "AIT"+count;
		this.age = age;
		this.name = name;
		this.marks = marks;
		count++;
	}
	public String getId() {
		return id;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Double getMarks() {
		return marks;
	}
	public void setMarks(Double marks) {
		this.marks = marks;
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", age=" + age + ", name=" + name + ", marks=" + marks + "]";
	}


}
============================================================================================================
package com.jspiders;
import com.customException.InvalidChoiceException;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;

public class Solution {
	public static void main(String[] args) {
		// main driven program
		//     upcasting
		//     switch case
		//     System.exit(0);
		//     infinite loop -->While loop
		Map<String,Student> db = new LinkedHashMap<>();
		Scanner scanner = new Scanner(System.in);
		StudentManagementSystem s = new StudentManagementImpl();
		System.out.println("welcome to student database");
		while(true) {
			System.out.println("---------------------------------------------------------------------------");
			System.out.println("1.Add Student\n2.Display Student\n3.DisplayAll Student\n4.Remove Student\n"
					+ "5.RemoveAll student\n6.Update student\n7.Count Student\n8.Sort Student\n9.Exit");
             System.out.println("Enter Your choice ");
			int choice = scanner.nextInt();
			switch(choice) {
			case 1 : s.addstudent();
			break;
			case 2 : s.displayStudent();
			break;
			case 3 : s.displayAllStudent();
			break;
			case 4 :  s.removeStudent();  
			break;
			case 5 : s.removeAllStudent();
			break;
			case 6 : s.updateStudent();
			break;
			case 7 : s.countStudent();
			break;
			case 8 : s.sortStudent();
			break;
			case 9 : System.out.println("Thank You");
			      System.exit(0);
			break;
			default : try {
				throw new InvalidChoiceException("Invalid choice , Please enter valid chice");
			}
			catch(Exception e) {
				System.out.println(e.getMessage());
			}
			}
		}
	}
}
===============================================================================================================================================
                             custom exception
======================================================== ========================================================== =====================
package com.customException;

public class InvalidChoiceException extends RuntimeException{
	private String message;

	public InvalidChoiceException(String message) {
		//super();
		this.message = message;
	}

	public String getMessage() {
		return message;
	}

}

============================================================================================================================================
package com.customException;

public class StudentNotFoundException extends RuntimeException {
	private String message;

	public StudentNotFoundException(String message) {
		//super();
		this.message = message;
	}

	public String getMessage() {
		return message;
	}

}
============================================================================================================================